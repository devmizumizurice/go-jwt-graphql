package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/devmizumizurice/go-jwt-graphql/graph/gqlModels"
	"github.com/devmizumizurice/go-jwt-graphql/models"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input gqlModels.SignUp) (*gqlModels.User, error) {
	user := &models.User{Name: input.Name, Email: input.Email, Password: input.Password}
	createdUser, err := r.Srv.CreateUser(user)
	if err != nil {
		return nil, err
	}
	graphUser := &gqlModels.User{
		Name:     createdUser.Name,
		Email:    createdUser.Email,
		Password: createdUser.Password,
	}
	return graphUser, nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input gqlModels.SignIn) (*gqlModels.User, error) {
	panic(fmt.Errorf("not implemented: SignIn - signIn"))
}

// Validate is the resolver for the validate field.
func (r *mutationResolver) Validate(ctx context.Context) (*gqlModels.User, error) {
	panic(fmt.Errorf("not implemented: Validate - validate"))
}

// Usr is the resolver for the usr field.
func (r *queryResolver) Usr(ctx context.Context, name string) (*gqlModels.Usr, error) {
	panic(fmt.Errorf("not implemented: Usr - usr"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, email string) (*gqlModels.User, error) {
	user, err := r.Srv.GetUserByEmail(email)

	if err != nil {
		return nil, err
	}
	graphUser := &gqlModels.User{
		Name:     user.Name,
		Email:    user.Email,
		Password: user.Password,
	}
	return graphUser, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
